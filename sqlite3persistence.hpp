//  SPDX-License-Identifier: GPL-3.0-or-later
//
//  Copyright (c) 2013-2023 plan44.ch / Lukas Zeller, Zurich, Switzerland
//
//  Author: Lukas Zeller <luz@plan44.ch>
//
//  This file is part of p44utils.
//
//  p44utils is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  p44utils is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with p44utils. If not, see <http://www.gnu.org/licenses/>.
//

#ifndef __p44utils__sqlite3persistence__
#define __p44utils__sqlite3persistence__

#include "p44utils_common.hpp"

#include "sqlite3pp/sqlite3pp.h"

using namespace std;

namespace p44 {

  // if 1, migrating from separate DBs into SQLite3TableGroup is supported
  #define SQLITE3_UNIFY_DB_MIGRATION 1

  #define SQLITE_PERSISTENCE_ERR_MIGRATION -99
  #define SQLITE_PERSISTENCE_ERR_SCHEMATOONEW -98

  /// SQLite3 error code based error
  class SQLite3Error : public Error
  {
  public:
    static const char *domain();
    virtual const char *getErrorDomain() const;
    SQLite3Error(int aSQLiteError, const char *aSQLiteMessage, const char *aContextMessage = NULL);
    static ErrorPtr err(int aSQLiteError, const char *aSQLiteMessage, const char *aContextMessage = NULL);
  };


  class SQLite3Persistence : public sqlite3pp::database
  {
    typedef sqlite3pp::database inherited;

    friend class SQLite3TableGroup;

    bool mInitialized;

  public:

    SQLite3Persistence();
    virtual ~SQLite3Persistence();

    /// connect to a database file
    /// @param aDatabaseFileName the database file name
    /// @param aFactoryReset if set, the database file will be deleted before connecting
    ErrorPtr connectDatabase(const char *aDatabaseFileName, bool aFactoryReset);

    /// get current SQLite3 error as a Error object
    ErrorPtr error(const char *aContextMessage = NULL);

    /// disconnect and finalize
    void disconnectDatabase();
  };


  class SQLite3TableGroup
  {
    friend class SQLiteTGQuery;
    friend class SQLiteTGCommand;

    SQLite3Persistence* mPersistenceP; ///< the actual persistence store
    string mTablesPrefix; ///< the prefix to be used in all tables
    bool mSchemaReady; ///< if set, the schema has been successfully verified/updated

  protected:
    /// Get DB Schema upgrade SQL statements
    /// @param aFromVersion current version (0=no database)
    /// @param aToVersion input: desired version, output: version that is generated by returned SQL
    /// @return SQL statements (templates, containing $PREFIX\_) needed to get to aToVersion, empty string if no migration is possible
    virtual string schemaUpgradeSQL(int aFromVersion, int &aToVersion);

  public:

    SQLite3TableGroup() : mPersistenceP(nullptr), mSchemaReady(false) {};

    /// @return the sqlitepp database connection
    SQLite3Persistence& db();

    /// performs initialisation/migration of the table group as needed to be compatible with the given version
    /// @param aNeededSchemaVersion the schema version needed to use the DB
    /// @param aLowestValidSchemaVersion if set to non-zero, all DB versions before this one will be considered obsolete and will cause a factory reset
    /// @param aFactoryReset if set, DB will be erased and recreated
    /// @param aDatabaseToMigrateFrom inf not null: a SQLite3 database file path to migrate data from
    /// @return ok or error
    ErrorPtr initialize(SQLite3Persistence& aPersistence, const string aTablesPrefix, int aNeededSchemaVersion, int aLowestValidSchemaVersion, const char* aDatabaseToMigrateFrom);

    /// check if underlying database is available (was initialized correctly)
    bool isAvailable();

    /// execute statement from template with $PREFIX\_ in it
    ErrorPtr prefixedExecute(const char* aTemplate, ...);

  private:

    /// substitute $PREFIX\_ with the actual table prefix (if not empty)
    /// @param aSqlTemplate the template which may contain $PREFIX_ before table names
    /// @return substituted version of SQL
    string prefixedSql(const string& aSqlTemplate) { return prefixedSql(aSqlTemplate, mTablesPrefix); }

    /// substitute $PREFIX\_ with aPrefix (if not empty)
    /// @param aSqlTemplate the template which may contain $PREFIX_ before table names
    /// @param aPrefix the prefix (empty: no prefix, non-empty: prefix NOT including underscore)
    /// @return substituted version of SQL
    static string prefixedSql(const string& aSqlTemplate, string aPrefix);

  };


  class SQLiteTGQuery : public sqlite3pp::query
  {
    typedef sqlite3pp::query inherited;

    SQLite3TableGroup& mTableGroup;

  public:

    SQLiteTGQuery(SQLite3TableGroup& aTableGroup);

    /// prevent standard prepare
    int prepare(char const* stmt) = delete;

    /// prepared query from template with $PREFIX\_ in it
    ErrorPtr prefixedPrepare(const char* aTemplate, ...);

  };


  class SQLiteTGCommand : public sqlite3pp::command
  {
    typedef sqlite3pp::command inherited;

    SQLite3TableGroup& mTableGroup;

  public:

    SQLiteTGCommand(SQLite3TableGroup& aTableGroup);

    /// prevent standard prepare
    int prepare(char const* stmt) = delete;

    /// prepared query from template with $PREFIX\_ in it
    ErrorPtr prefixedPrepare(const char* aTemplate, ...);

  };


}


#endif /* defined(__p44utils__sqlite3persistence__) */
